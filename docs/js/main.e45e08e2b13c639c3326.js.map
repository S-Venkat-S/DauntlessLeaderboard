{"version":3,"sources":["webpack:///./src/components/data_gen/index.css","webpack:///./src/pages/landing.css","webpack:///./src/components/leaderboard_table/index.css","webpack:///./src/components/leaderboard_table/index.jsx","webpack:///./src/components/data_gen/index.jsx","webpack:///./src/pages/landing.jsx","webpack:///./src/App.jsx","webpack:///./src/index.jsx"],"names":["module","exports","Leaderboard","props","data","setData","useState","tableData","valRef","useRef","useEffect","current","className","style","container","slno","rank","slayer","time","map","i","j","rankNo","isAlreadyPresent","cross","slayerName","Time","DataGeneration","slayer1","setSlayer1","slayer2","setSlayer2","slayer3","setSlayer3","slayer4","setSlayer4","setTime","numOfSlayer","nameList","inner_container","type","onInput","obj","target","value","onClick","randomNumber","randomNames","length","randomName","Math","floor","random","indexOf","push","parseFloat","toFixed","randomizedData","Slayers","updateFunction","maxBoard","defaultValue","setMaxBoard","propType","PropTypes","func","isRequired","Landing","window","dataTemplate","squadId","setTableData","getNonDuplicateData","leaderboardData","count","forEach","isNameAlreadyPresent","copiedTableData","tableDatum","genData","squadData","rankNsquad","leaderboard","leaderBoardData","getrankNsquad","nextRankSquadId","undefined","trim","removeSquadFrom","from","pop","parseInt","console","log","dataGen","setFinalData","prevSquadId","removeExcessInLeaderBoard","localTableData","beforeData","splice","prevRank","concat","afterData","placeData","App","Component","constructor","super","this","state","render","ReactDOM","document","getElementById"],"mappings":"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","file":"js/main.e45e08e2b13c639c3326.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___-4xBP\",\"inner_container\":\"inner_container___2jbT8\",\"innerContainer\":\"inner_container___2jbT8\",\"maxBoard\":\"maxBoard___18ORU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___1n3qD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cross\":\"cross___2d46o\",\"container\":\"container___2vu9r\",\"slno\":\"slno___1wYTT\",\"rank\":\"rank___HM5EQ\",\"slayer\":\"slayer___j8PFL\",\"time\":\"time___1zrkq\"};","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./index.css\";\r\n\r\nconst Leaderboard = function (props) {\r\n  const [data, setData] = useState(props.tableData);\r\n  const valRef = useRef(data);\r\n  useEffect(() => {\r\n    setData(props.tableData);\r\n    valRef.current = props.tableData;\r\n  }, [props.tableData]);\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td className={style.slno}>Sl. No</td>\r\n            <td className={style.rank}>Rank</td>\r\n            <td className={style.slayer}>Slayer</td>\r\n            <td className={style.time}>Time</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((i, j) => (\r\n            <tr key={i}>\r\n              <td>{j + 1}</td>\r\n              <td>{i.rankNo}</td>\r\n              <td className={i.isAlreadyPresent ? style.cross : \"false\"}>{i.slayerName}</td>\r\n              <td>{i.Time}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nLeaderboard.propTypes = {\r\n  tableData: PropTypes.objectOf(PropTypes.object()),\r\n};\r\n\r\nexport default Leaderboard;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./index.css\";\r\n\r\nconst DataGeneration = function (props) {\r\n  const [slayer1, setSlayer1] = useState(\"\");\r\n  const [slayer2, setSlayer2] = useState(\"\");\r\n  const [slayer3, setSlayer3] = useState(\"\");\r\n  const [slayer4, setSlayer4] = useState(\"\");\r\n  const [time, setTime] = useState(0);\r\n\r\n  let numOfSlayer = 10;\r\n\r\n  const nameList = [\r\n    \"Gnasher\",\r\n    \"Shrike\",\r\n    \"Quillshot\",\r\n    \"Charrogg\",\r\n    \"Embermane\",\r\n    \"Hellion\",\r\n    \"Torgadoro\",\r\n    \"Skraev\",\r\n    \"Boreus\",\r\n    \"Pangar\",\r\n    \"Drask\",\r\n    \"Nayzaga\",\r\n    \"Stormclaw\",\r\n    \"Malkarion\",\r\n    \"Skarn\",\r\n    \"Kharabak\",\r\n    \"Koshai\",\r\n    \"Valomyr\",\r\n    \"Rezakiri\",\r\n    \"Riftstalker\",\r\n    \"Shrowd\",\r\n    \"Styxian\",\r\n    \"Gruk Gruk\",\r\n    \"Assassins Vigour\",\r\n    \"Bloodless\",\r\n    \"Fireproof\",\r\n    \"Fortress\",\r\n    \"Guardian\",\r\n    \"Iceborne\",\r\n    \"Insulated\",\r\n    \"Nine Lives\",\r\n    \"Shellshock Resist\",\r\n    \"Strategist\",\r\n    \"Sturdy\",\r\n    \"Tough\",\r\n    \"Warmth\",\r\n    \"Agility\",\r\n    \"Conditioning\",\r\n    \"Endurance\",\r\n    \"Evasion\",\r\n    \"Fleet Footed\",\r\n    \"Grace\",\r\n    \"Nimble\",\r\n    \"Sprinter\",\r\n    \"Swift\",\r\n    \"Aetherhunter\",\r\n    \"Deconstruction\",\r\n    \"Discipline\",\r\n    \"Knockout King\",\r\n    \"Overpower\",\r\n    \"Pacifier\",\r\n    \"Rage\",\r\n    \"Ragehunter\",\r\n    \"Sharpened\",\r\n    \"Acidic\",\r\n    \"Adrenaline\",\r\n    \"Barbed\",\r\n    \"Berserker\",\r\n    \"Bladestorm\",\r\n    \"Cunning\",\r\n    \"Evasive Fury\",\r\n    \"Merciless\",\r\n    \"Molten\",\r\n    \"Predator\",\r\n    \"Savagery\",\r\n    \"Weighted Strikes\",\r\n    \"Wild Frenzy\",\r\n    \"Aetherborne\",\r\n    \"Aetheric Attunement\",\r\n    \"Aetheric Frenzy\",\r\n    \"Conduit\",\r\n    \"Energized\",\r\n    \"Engineer\",\r\n    \"Lucent\",\r\n    \"Medic\",\r\n    \"Mender\",\r\n    \"Stunning Vigour\",\r\n    \"Vampiric\",\r\n    \"Zeal\",\r\n  ];\r\n\r\n  const getRandomName = function () {\r\n    const randomNumber = Math.floor(Math.random() * nameList.length);\r\n    return nameList[randomNumber];\r\n  };\r\n\r\n  const randomizedData = function () {\r\n    const randomNames = [];\r\n    while (randomNames.length < 4) {\r\n      const randomName = getRandomName();\r\n      if (randomNames.indexOf(randomName) === -1) {\r\n        randomNames.push(randomName);\r\n      }\r\n    }\r\n    setSlayer1(randomNames[0]);\r\n    setSlayer2(randomNames[1]);\r\n    setSlayer3(randomNames[2]);\r\n    setSlayer4(randomNames[3]);\r\n    setTime(parseFloat((Math.random() * 3).toFixed(3)));\r\n  };\r\n\r\n  const updateData = function () {\r\n    const data = { Slayers: [slayer1, slayer2, slayer3, slayer4], Time: time };\r\n    props.updateFunction(data);\r\n  };\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <div className={style.inner_container}>\r\n        <tbody>\r\n          <tr>\r\n            <td>Slayer 1 :</td>\r\n            <td>\r\n              <input type=\"text\" onInput = {(obj)=>{setSlayer1(obj.target.value)}} value={slayer1}/>\r\n            </td>\r\n            <td>\r\n              <button onClick = {()=>{setSlayer1(\"\")}}>X</button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Slayer 2 :</td>\r\n            <td>\r\n              <input type=\"text\" onInput = {(obj)=>{setSlayer2(obj.target.value)}} value={slayer2}/>\r\n            </td>\r\n            <td>\r\n              <button onClick = {()=>{setSlayer2(\"\")}}>X</button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Slayer 3 :</td>\r\n            <td>\r\n              <input type=\"text\" onInput = {(obj)=>{setSlayer3(obj.target.value)}} value={slayer3}/>\r\n            </td>\r\n            <td>\r\n              <button onClick = {()=>{setSlayer3(\"\")}}>X</button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Slayer 4 :</td>\r\n            <td>\r\n              <input type=\"text\" onInput = {(obj)=>{setSlayer4(obj.target.value)}} value={slayer4}/>\r\n            </td>\r\n            <td>\r\n              <button onClick = {()=>{setSlayer4(\"\")}}>X</button>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Time :</td>\r\n            <td>\r\n              <input type=\"number\" onInput = {(obj)=>{setTime(obj.target.value)}} value={time} />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td><button onClick = {()=>{randomizedData()}}>Randomize</button></td>\r\n            <td><button onClick = {()=>{updateData()}}>Update</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </div>\r\n      <br />\r\n      <div className={style.maxBoard}>\r\n        Maximum number of slayers in leaderboard :\r\n        <input type=\"number\" onInput = {(obj)=>{numOfSlayer = obj.target.value}} defaultValue=\"10\" />\r\n        <button onClick = {()=>{props.setMaxBoard(numOfSlayer)}}>Update</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDataGeneration.propType = {\r\n  updateFunction: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DataGeneration;\r\n","import React, { useState } from \"react\";\r\nimport Leaderboard from \"../components/leaderboard_table/index.jsx\";\r\nimport DataGeneration from \"../components/data_gen/index.jsx\";\r\nimport style from \"./landing.css\";\r\n\r\nconst Landing = function () {\r\n  // This only applies for Squad leaderboard only\r\n  // Lets assume that the leaderboard holds 10 Squads max (Currently at 100 Squads)\r\n  // We limit the leaderboard by each person not by an entire squad\r\n  // Meaning that 10*4 = 40 members (or 39+4=43 at max)\r\n  // If a member in the squad already having a place in the leaderboard (Higher rank)\r\n  // Lets count the squad member as 3 and make his name in lighter color / strikeout (Means he already holding a place on top)\r\n  // (i.e. if already the leaderboard has 26, the new number will be 26+3=29, remove the count of the player who already had a name on the leaderboard)\r\n  // If  a member in the squad already having a place in the leaderboard (Lesser rank)\r\n  // Make the same, count the squad member as 3 and make his name greyscale in the lesser rank.\r\n  // If the board holds 39 members so far and a duo comes to the last place, then the leaderboard only holds 41 member max\r\n  // If the board holds 39 members so far and a squad (4 members) seeks the last place, then the leaderboard only holds 43 member max\r\n  // The idea here is we only add Duos, Trios, Squads only if the leaderboard is < 40 (i.e. 39) and the max leaderboard go is 43.\r\n  // By doing this way we can eliminate the leaderboard filled with same names in most of squad.\r\n\r\n  // dataTemplate = {\"squadId\": 1231231, \"Rank No\": 1, \"Slayer Name\" : \"Test\", \"isAlreadyPresent\" : false, \"Time\": 1.00}\r\n\r\n  // The number of member that the board holds (maxboard + 3)\r\n  window.maxBoard = 10;\r\n\r\n  // Template for leaderboard rows.\r\n  // squadId => A unique id to identify the squad, each member in the squad is assigned the same id\r\n  // rankNo => Rank number,\r\n  // slayerName => Name of the slayer,\r\n  // isAlreadyPresent => Is the slayer already holds row in the upper ranks,\r\n  // Time => time taken to complete the trials (Sorting key)\r\n  const dataTemplate = {\r\n    squadId: 1231231,\r\n    rankNo: 1,\r\n    slayerName: \"Test\",\r\n    isAlreadyPresent: false,\r\n    Time: 1.0,\r\n  };\r\n\r\n  // Used to change maxBoard value to test the functionality\r\n  const setMaxBoard = function (count) {\r\n    window.maxBoard = parseInt(count, 10);\r\n  };\r\n\r\n  // The leaderboard table getter and setter\r\n  const [tableData, setTableData] = useState([]);\r\n\r\n  // Will return non-duplicate slayers count. (No. of slayer with isAlreadyPresent = false)\r\n  const getNonDuplicateData = function (leaderboardData) {\r\n    let count = 0;\r\n    leaderboardData.forEach(function (data) {\r\n      if (data.isAlreadyPresent === false) {\r\n        count += 1;\r\n      }\r\n    });\r\n    return count;\r\n  };\r\n\r\n  // Return an array [rankNo, squadId]\r\n  // rankNo => Rank of the squad by comparing the time\r\n  // squadId=> The id of the squad which is next to the current squad. (rankNo+1.squadId)\r\n  const getrankNsquad = function (time) {\r\n    const leaderboard = tableData;\r\n    // -1 => Current squad does not hold any rank in the leaderboard\r\n    // 0 => There is no squad behind / next to the current squad. (May be the current squad is last squad or the leaderboard is empty)\r\n    let rankNsquad = [-1, 0];\r\n    for (let i = 0; i < leaderboard.length; i += 1) {\r\n      const leaderBoardData = leaderboard[i];\r\n      if (time < leaderBoardData.Time) {\r\n        rankNsquad = [leaderBoardData.rankNo, leaderBoardData.squadId];\r\n        break;\r\n      }\r\n    }\r\n    if (rankNsquad[0] === -1) {\r\n      if (leaderboard.length === 0) {\r\n        return [1, 0];\r\n      }\r\n      if (getNonDuplicateData(leaderboard) < maxBoard) {\r\n        const lastData = leaderboard[leaderboard.length - 1];\r\n        return [lastData.rankNo, 0];\r\n      }\r\n      return rankNsquad;\r\n    }\r\n    return rankNsquad;\r\n  };\r\n\r\n  // This will return whether the slayer name is already present in the leaderboard or not.\r\n  // And also sets isAlreadyPresent = true, if the slayer already present in the leaderboard\r\n  const isNameAlreadyPresent = function (slayerName, time) {\r\n    const copiedTableData = [...tableData];\r\n    for (let i = 0; i < copiedTableData.length; i += 1) {\r\n      const tableDatum = copiedTableData[i];\r\n      if (tableDatum.slayerName === slayerName) {\r\n        if (time < tableDatum.Time) {\r\n          tableDatum.isAlreadyPresent = true;\r\n          setTableData(copiedTableData);\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Construction of the leaderboard table row datas (array of json).\r\n  const genData = function (data) {\r\n    const squadData = [];\r\n    const rankNsquad = getrankNsquad(data.Time);\r\n    const rankNo = rankNsquad[0];\r\n    if (rankNo === -1) {\r\n      return false;\r\n    }\r\n    const nextRankSquadId = rankNsquad[1];\r\n    const squadId = Math.random();\r\n    const time = data.Time;\r\n    for (let i = 0; i < data.Slayers.length; i += 1) {\r\n      const slayer = data.Slayers[i];\r\n      // Removing the slayer for possibility of Duos / Trios\r\n      // Solos can also be placed (Its understandable that solo hunt doesn't come to squad leaderboard)\r\n      if (slayer === undefined || slayer.trim().length === 0) {\r\n        continue;\r\n      }\r\n      dataTemplate.squadId = squadId;\r\n      dataTemplate.rankNo = rankNo;\r\n      dataTemplate.slayerName = slayer;\r\n      dataTemplate.isAlreadyPresent = isNameAlreadyPresent(slayer, time);\r\n      dataTemplate.Time = time;\r\n      squadData.push({ ...dataTemplate });\r\n    }\r\n    return [nextRankSquadId, squadData];\r\n  };\r\n\r\n  // The current squad data is placed by splicing the current leaderboard in to two (before, after)\r\n  const placeData = function (squadId, data) {\r\n    const localTableData = [...tableData];\r\n    // please read getrankNsquad methods\r\n    if (squadId === 0) {\r\n      const beforeData = localTableData.splice(0);\r\n      let prevRank = 0;\r\n      if (beforeData.length > 0) {\r\n        prevRank = beforeData[beforeData.length - 1].rankNo;\r\n      }\r\n      for (let i = 0; i < data.length; i += 1) {\r\n        const prevData = data[i];\r\n        prevData.rankNo = prevRank + 1;\r\n      }\r\n      return beforeData.concat(data);\r\n    }\r\n    for (let i = 0; i < localTableData.length; i += 1) {\r\n      const curData = localTableData[i];\r\n      if (curData.squadId === squadId) {\r\n        const beforeData = localTableData.splice(0, i);\r\n        const afterData = localTableData;\r\n        // Updating the ranks of the squad behind current squad\r\n        for (let j = 0; j < afterData.length; j += 1) {\r\n          const curAfterData = afterData[j];\r\n          curAfterData.rankNo += 1;\r\n        }\r\n        // Merging the before, current, after datas\r\n        const concatData = beforeData.concat(data).concat(afterData);\r\n        return concatData;\r\n      }\r\n    }\r\n    return localTableData;\r\n  };\r\n\r\n  // Will remove the squad (last n numbers) from the leaderboard.\r\n  const removeSquadFrom = function (data, from) {\r\n    while (data.length > from) {\r\n      data.pop();\r\n    }\r\n    return data;\r\n  };\r\n\r\n  // Calulation on how many slayers to be removed (from).\r\n  // Gets the squadId of last slayer (maxBoard)\r\n  // Removes the slayers after last slayer (maxBoard) who doesn't hold the same id as last slayer\r\n  const removeExcessInLeaderBoard = function (leaderboardData) {\r\n    let prevSquadId = null;\r\n    for (let i = maxBoard; i < getNonDuplicateData(leaderboardData); i += 1) {\r\n      if (prevSquadId === null) {\r\n        prevSquadId = leaderboardData[i].squadId;\r\n      }\r\n      if (prevSquadId !== leaderboardData[i].squadId) {\r\n        const finalData = removeSquadFrom(leaderboardData, i);\r\n        return finalData;\r\n      }\r\n    }\r\n    return leaderboardData;\r\n  };\r\n\r\n  // One way method to set data\r\n  const setFinalData = function (data) {\r\n    setTableData(data);\r\n  };\r\n\r\n  // The main method for updating the data from the data_gen component.\r\n  const updateData = function (data) {\r\n    console.log(data);\r\n    const dataGen = genData(data);\r\n    if (dataGen === false) {\r\n      return;\r\n    }\r\n    const nextRankSquadId = dataGen[0];\r\n    const squadData = dataGen[1];\r\n    const leaderBoardData = placeData(nextRankSquadId, squadData);\r\n    const finalData = removeExcessInLeaderBoard(leaderBoardData);\r\n    setFinalData(finalData);\r\n    console.log(tableData);\r\n  };\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <Leaderboard tableData={tableData} />\r\n      <DataGeneration setMaxBoard={setMaxBoard} updateFunction={updateData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\r\nimport { hot } from \"react-hot-loader/root\";\r\nimport Landing from \"./pages/landing\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Landing />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\n\r\nReactDOM.render(<App />, document.getElementById('app'));\r\n"],"sourceRoot":""}